// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/plugins/readme/README.md
// templates/templates.go
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesPluginsReadmeReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x6f\xeb\x38\x0c\xbc\xeb\x57\x10\x2f\xb7\xbe\xd8\x2e\x7a\x0c\x16\xc1\x7b\x49\xbb\x1f\x40\xbb\x28\x9a\x74\x81\xbd\x55\x96\x19\x59\x89\x4c\x0a\xa2\x9c\xd4\xff\x7e\x21\x3b\x6d\xd2\xbd\xbc\x93\x01\x7b\x38\x1c\xce\x8c\x67\xb0\x75\xc9\xa3\x52\xb3\x19\xdc\xa3\x98\xe8\x42\x72\x4c\x4a\xad\x7a\x71\x84\x22\x10\x22\x9b\xfc\xd4\x21\x78\x67\x74\xfe\x0a\x21\xa2\x20\x25\x47\xb6\x84\x87\xf7\x05\xac\x75\xd2\x9e\xed\x1c\x36\x2d\x87\x80\x11\x22\x5a\x27\x29\xea\x89\xeb\x39\x72\xd3\x9b\x71\xf2\xf5\xe5\x71\x01\xbf\xb5\x29\x05\x59\x54\x55\xc3\x9d\x76\x54\x1a\xee\x96\x57\x1b\x1b\x36\x7d\x87\x94\xc6\xe9\x2b\xb4\x61\xda\xf9\x1e\xc9\x60\xf9\x65\x70\x13\xd0\xb8\xdd\x59\xdb\x15\x5e\x4e\xda\x5a\x8c\x57\xe0\x4a\x30\x1e\x9d\xc1\x9f\xe5\xd0\xf9\xe5\xfc\x17\xd4\xd5\xc3\x11\x29\xad\x7a\x59\x8e\xf6\x6c\xf2\x3d\x68\x07\xe0\x5d\x36\x65\x8f\x26\x29\xf5\xf4\xcf\x33\x24\xe7\x3d\xdc\xde\x95\x77\xb7\x77\xb7\x80\x79\x06\x2a\xd8\x24\x5d\x4f\xbe\xce\x60\xa5\xc5\x19\x88\x4e\x0e\xa2\x54\x01\x8f\x7c\x82\x03\xf1\xc9\x63\x63\x31\xb3\x4d\x2b\x55\x01\x4f\xbd\x24\xa8\x11\x5c\xb6\xf8\xd3\xb3\x1a\x77\x1c\x11\xfe\xfe\x77\x62\x7b\x8e\x8e\x8c\x0b\x1e\x47\xb2\x57\x41\x68\x50\x9c\x25\xa8\x87\x33\x13\x54\xf0\x7b\xd6\xd4\xe9\x90\xe9\xeb\x0f\x63\x13\x7f\x49\xd1\x3b\x3a\x08\x54\xf0\x93\xb4\x1f\x04\x3f\xf6\x34\x78\x44\xcf\x41\x15\xb0\x66\x4a\x91\xbd\xc7\x08\x39\xd4\x4f\x1e\x31\x48\x3a\x3a\x86\xef\x20\x1d\x1f\x10\x12\x4a\x52\x05\x6c\xef\xef\xe1\x3b\x10\x4f\x7a\x54\x01\x2d\xbe\x6b\xcb\x94\x71\xc1\xbb\x04\x3d\xb9\x34\x77\x94\xd0\x4e\xd5\x18\x07\x45\x15\xa0\x8d\xc1\x90\x34\x99\x89\x4b\x40\xa7\x4b\x38\xd6\xa5\xb6\xaf\xc7\x44\x96\x65\x59\x8e\x61\x64\x69\xda\xa4\xd1\x82\x2d\x9a\x96\x9c\xd1\x7e\x01\x1b\x8c\x16\x7e\x08\x46\xab\x0a\x38\xd7\x6e\x01\x7f\x1d\x35\xc1\x0f\x77\xd4\x59\xd3\xdb\x2c\xa1\x69\xdf\x4a\x78\xc1\xa3\xc3\xd3\xfc\xc3\x3d\x2d\xe2\x64\x94\x50\xaa\x02\x5e\x30\x70\x4c\x50\xf7\x76\xd4\xb2\x77\x51\x5f\x37\x63\xf5\xfa\xc7\x26\xc3\xd6\x7d\x8c\x39\x6f\x0e\x78\xbe\x48\x92\x4e\xfd\x45\x7f\xae\xe1\xf8\xe6\xba\xb2\xe5\xb9\x4f\xda\x3a\xb2\x4a\xfd\xc9\xa7\x1c\x4d\x83\xc1\xf3\x00\x3b\x8e\xff\xb7\xc3\x91\x05\x4d\x0d\x34\xd8\x31\xb4\x18\xa7\xdf\x75\x1b\xb9\xaf\x3d\x4a\xcb\x9c\x46\x9e\xb5\x4e\xa6\xcd\xd8\xcd\xd0\xed\x98\x06\x78\x78\xcf\x34\x59\xd5\xb7\xed\x10\x10\x30\x46\x8e\x0b\xf8\x96\xd5\xdd\xdc\xdc\xcc\xd5\x79\x25\xe1\x09\x9a\xbe\x0b\xa5\x52\x5b\x06\x61\x7f\x44\xd8\x46\x4d\x92\x3d\xb8\x90\x44\x3c\xe3\x75\x08\x97\x74\xf6\x48\x07\x47\xd7\xf7\x55\x7b\xae\xab\xa5\xfa\x2f\x00\x00\xff\xff\x1a\x2d\xcd\x68\x5b\x04\x00\x00")

func templatesPluginsReadmeReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesPluginsReadmeReadmeMd,
		"templates/plugins/readme/README.md",
	)
}

func templatesPluginsReadmeReadmeMd() (*asset, error) {
	bytes, err := templatesPluginsReadmeReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/plugins/readme/README.md", size: 1115, mode: os.FileMode(420), modTime: time.Unix(1605639460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTemplatesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8f\xe3\xc6\x11\x3d\x8b\xbf\xa2\x2d\xc0\x86\x08\x6c\x24\x7e\x7f\x2c\x30\x40\xe2\xdd\x09\xb0\x87\x5d\x07\xeb\xbd\xa5\x02\xa3\xc9\xee\xd6\x12\x91\x44\x85\xa4\xec\xd2\x1a\xfb\xdf\x83\xd7\xd5\x1a\xcf\x64\xec\xc9\xc5\x07\x8e\xc8\x9e\xae\xaa\x57\x55\xaf\x5e\x93\xbb\x9d\x7a\x33\x1a\xab\xf6\xf6\x64\x27\xbd\x58\xa3\xdc\x38\xa9\xb3\xee\xff\xad\xf7\x56\x2d\xf6\x78\x3e\xe8\xc5\xce\xaa\xbb\xaa\xfd\xf8\x97\x6e\x38\x19\xbd\x68\xf5\xf6\x07\xf5\xe1\x87\x4f\xea\xfe\xed\xbb\x4f\x5b\xb5\xf9\xeb\x83\x71\x1c\xed\x76\x6a\x1e\x2f\x53\x6f\xe7\xd7\xb8\x7f\x70\xb0\x3b\x1f\x2e\xfb\xe1\x34\xef\x26\xab\xcd\xd1\xee\x3e\xde\xff\xed\xed\xfb\xfb\xed\xd1\x3c\xdd\xf5\x70\xb7\xdd\x8f\xd1\x33\x14\x51\x34\x1c\xcf\xe3\xb4\xa8\x4d\xb4\x5a\x77\xd7\xc5\xce\xeb\x68\xb5\xee\xc7\xe3\x79\xb2\xf3\xbc\xdb\x7f\x19\xce\x58\x70\xc7\x05\x3f\xc3\x28\x7f\x77\xc3\x78\x59\x86\x03\x1e\x46\x6f\x70\xd6\xcb\xe7\x9d\x1b\x0e\x16\x37\x58\x98\x97\x69\x38\xed\xfd\xff\x96\xe1\x68\xd7\x51\x1c\x45\xee\x72\xea\x55\xc8\xf7\xa3\xd5\x66\xe3\x13\xff\xe7\xbf\x10\xf6\x95\x3a\xe9\xa3\x55\x62\x16\xab\xcd\x6d\xd5\x4e\xd3\x38\xc5\xea\xd7\x68\xb5\xff\xe2\x9f\xd4\xeb\x3b\x05\x54\xdb\x0f\xf6\x17\x38\xb1\xd3\xc6\xc3\xc6\xf3\xf7\x17\xe7\xec\xe4\xdd\xc6\x71\xb4\x1a\x9c\x37\xf8\xe6\x4e\x9d\x86\x03\x5c\xac\x26\xbb\x5c\xa6\x13\x1e\x5f\x29\x77\x5c\xb6\xf7\xf0\xee\x36\x6b\x38\x52\xdf\xfe\xe7\xb5\xfa\xf6\xe7\xb5\x20\xf1\xb1\xe2\x68\xf5\x35\x8a\x56\x3f\xeb\x49\x75\x17\xa7\x24\x8e\x04\x89\x56\x3f\x09\x9c\x3b\x35\x8c\xdb\x37\xe3\xf9\xba\xf9\xae\xbb\xb8\x57\x6a\xff\x25\x8e\x56\xfd\xe1\xfe\x86\x74\xfb\xe6\x30\xce\x76\x13\x47\x7f\x16\x1e\xb8\x11\xff\x7f\xe0\xc8\x4e\x93\xe0\x0e\x8b\xdd\xc5\x6d\xbf\x07\xf4\x4d\xfc\x0a\x3b\xa2\xaf\x51\xb4\x5c\xcf\x56\xe9\x79\xb6\x0b\x4a\x7e\xe9\x17\x78\xf1\xf9\x85\x7e\x44\xab\xe1\xe4\x46\xa5\xc6\x79\xfb\xf7\xe1\x60\xdf\x9d\xdc\xf8\x60\x17\x5a\x78\x5b\x7f\xe4\xc1\xf7\x50\xa9\xd0\xc6\x68\x35\x0f\x5f\xfc\xf3\x70\x5a\xaa\x22\x5a\x1d\x31\x16\xea\xc1\xe9\xfb\xd1\x58\xbf\xf8\x69\x38\x5a\x05\x9a\x6c\x71\x87\x38\xbb\x9d\xfa\x00\x5f\x21\x05\x30\xcb\x97\x41\x38\xb4\x71\xc3\xff\x82\x88\xfd\xfe\x4d\x1c\x42\x03\xcc\x83\xed\xd6\x5b\x8a\xd7\x1f\x81\xe8\xb1\x57\x40\x7c\xc1\x2b\xf6\x6f\x62\x49\xe0\xa9\x53\x6f\x28\x4e\x91\xc8\x13\xa7\x48\xf4\x05\xa7\xd8\xbf\x89\x1f\x97\xe1\xa9\x6b\x6f\xfe\xc7\xae\x07\x77\xf5\xd5\x7a\x39\x02\x4a\xb9\x89\x7f\x2b\xeb\xb3\x10\x8f\x6a\xfd\x6e\x7e\x3b\x4c\x4f\xc2\xfc\xf2\xd9\x2e\x9f\xed\xa4\xb4\x32\xc3\x64\xfb\x65\x9c\xae\x2f\x84\xf3\xf6\x9b\x58\x75\xe3\x78\x78\x9e\xca\x77\xe3\xbc\x45\x1e\x88\xf1\xcd\x9d\x4a\x6e\xad\xb8\xce\x4f\x42\x0e\xb3\x9a\xaf\xf3\xff\xab\xdd\x8f\xd7\x59\xfa\x61\x27\xa7\x7b\xfb\xeb\xd7\x47\xf1\x02\xb9\x31\xaf\x3f\x3d\x28\xdc\x3f\x44\x25\x3f\x7a\x91\x94\xbf\xef\x8d\xba\x0b\x3c\xdf\xac\x89\x53\x47\xdc\x74\xc4\x49\x43\x9c\x24\xbf\x7f\x39\xec\x29\x88\xcb\x9c\xb8\x30\xc4\x95\x23\xb6\x1d\x71\x0e\x9b\x9e\xb8\xeb\xe5\xb9\xac\x89\xd3\x84\x38\x73\xc4\x5d\x4d\xdc\x59\x62\xd3\x10\x67\x96\xb8\xd6\xb2\x37\xad\x88\xfb\x94\xb8\xee\x88\x8b\x96\xb8\xeb\x04\x43\x91\xc8\x7d\xd6\x10\xb7\x9a\xb8\x2e\x88\x9b\x94\xb8\x33\xc4\x65\x49\xdc\x56\xc4\x69\x4b\x5c\xb6\xc4\x4d\x4b\x5c\xf4\xc4\x89\x26\xd6\x19\x71\xdb\x13\x9b\x42\x70\xd6\x96\x38\x4b\x89\xf3\x8e\xb8\x32\xc4\x26\x13\x1f\xc0\xd8\xe6\xc4\x49\x88\x0d\xec\x69\x4f\xdc\x5b\xe2\xa6\x27\xae\x80\x37\x21\xae\x4b\xe2\xbe\x25\xd6\x39\x71\x09\xdb\x5c\xe2\x9a\x5e\xd6\xda\x86\xd8\x36\xc4\x45\x46\x5c\x67\x82\xa3\x00\x0e\x23\x39\xd6\xa9\xd4\x2a\xcb\x42\x2d\x80\xaf\x23\x76\x01\x23\xb0\xd5\x8d\xc4\x43\x8e\xce\x4a\x1e\x58\x47\x2e\x19\x6c\x4a\xe2\x02\x78\x2a\xf1\xd5\xd4\xc4\xae\x26\x4e\x4a\x62\xdd\x0b\x46\xe4\xd5\x5a\x62\x6b\x24\x8f\xbc\x22\xce\x8c\xec\x6d\x12\xe2\x34\x95\xd8\x25\x7c\xd7\xc4\x59\x4b\x6c\xb5\xd4\xce\xf7\xae\x15\xfc\x26\x17\x7c\xc0\xed\x32\x62\x57\x12\xdb\x52\x9e\x51\xab\x0e\xbd\x2c\xc5\x1e\xf1\x51\xff\xb2\x90\x9e\xf4\xb0\x45\xde\x95\xac\xa5\x9a\xd8\x5a\xe9\x95\xe7\x42\x27\x17\xb0\xd5\x01\x5b\x5b\x10\xf7\x15\xb1\x6d\x89\xb3\x8e\xb8\x2b\x88\xab\x94\xd8\x68\x62\xd7\x12\xa7\x56\xea\x5f\x25\xf2\x5c\x01\x0b\xf2\xc9\x89\x0d\x38\xd2\x10\x1b\x23\x38\x0c\xfc\x03\x93\x25\x2e\xac\xf8\x40\xbe\xe8\x27\xe2\xdb\x44\x7a\x93\x27\xe2\x17\x58\xc1\xbd\xd6\x49\x8e\x26\xc4\xc0\x3d\xfa\x93\xd6\xd2\x23\x13\x72\xf3\x35\x6c\x7f\xeb\xad\xe7\x9e\x25\x76\x15\x71\xd5\x4b\xbd\x72\xcc\x03\xe6\x20\xc4\x2b\x8d\xe4\x0b\xdc\x8d\x23\xce\x2a\xf1\x81\xba\x3a\xe4\xee\x88\xf3\x9c\x38\x2b\x88\x6d\x2d\xf6\xe0\x96\x01\x3e\xe4\x5a\xcb\xec\xdc\x7e\xd1\xcb\x1a\xb5\x87\x1f\x1d\xe6\xa9\x90\x38\x85\x93\x19\x03\x87\x51\x2f\x0d\xdc\xa5\xf0\xb5\x69\xa4\x26\x89\x15\x5e\xa1\x3f\xe8\x27\x30\xd5\x3d\x71\x93\x11\x27\x39\xb1\x4b\x43\xbd\x73\xb9\xf2\x54\x38\x8f\x39\x47\x7f\xd0\x67\xd8\xf9\x58\x46\x62\xeb\x46\x6a\x53\xf6\xc2\x51\xd7\x08\x8f\xfc\xac\x68\xc1\x0e\x4e\x62\x0f\xf8\x8d\x0b\x6b\x55\x26\xb3\x87\x1a\x36\x61\xee\x92\x4e\x7a\xe3\xf9\x9e\x49\xdf\x8a\x54\x6a\x5a\x26\x32\xdb\x98\x07\xc4\x04\x7f\x50\x3b\x70\x01\xf9\xb8\x44\xfc\x99\x4a\xfa\x06\x4e\xb5\x89\xfc\x82\xe3\x89\x93\x9c\xb0\xbf\x76\xa2\x37\x26\x68\x43\xae\x45\xf3\x6e\x7e\xa0\x0d\xe0\x22\xb4\x28\x29\x88\x73\x27\x7d\xce\x0b\x99\xd7\x22\xf4\x0e\xd8\xc0\x39\x68\x45\x55\x09\xbf\xda\xa0\x53\x7d\x2d\x3e\x31\x5b\xc0\x83\x9a\x21\x37\xd4\xb4\x68\x24\x26\xae\x06\xfc\x77\x32\xeb\xa9\x91\x98\xd0\x8a\x34\x13\x7f\xd0\x1d\xcc\x1a\x38\x86\x7d\xfe\x0a\xb8\xb1\x0f\x7e\x3d\x1f\x43\x4f\x31\xf7\xe0\x41\xd5\x11\xf7\x9d\xcc\x18\xe6\x17\x5c\x87\xa6\xfa\x7c\xb0\xa7\x0d\xf9\x84\x39\x04\xff\xfd\xdc\x80\x33\x81\xc3\x45\x29\xf9\xe9\x84\xb8\xb9\xcd\x4b\x22\x76\xed\x4d\x7b\x3b\xd1\x6b\x5d\xcb\x3d\xb4\x14\x3d\x00\xff\xc0\x07\xed\xa4\x16\xa8\x59\x1b\x66\xe1\x36\x3b\x98\xf5\x0a\x33\xdf\xca\xbc\xea\x42\x7a\x02\x3e\x22\x0f\x68\x3f\x6c\xbc\xa6\xa7\xa2\xe7\xc8\x11\x3a\xd2\x84\xf3\xc3\xaf\xa1\x27\x88\xd5\x89\x7e\x7a\x0c\xe0\x58\xd8\x8f\x7e\xa3\xb6\x79\x29\x39\x80\x0b\x75\x98\x6f\xaf\x1d\xb9\xe8\x47\x06\x5d\x4f\x03\x1e\x27\xf5\x47\xbf\x61\x03\xbd\x87\x0e\x60\x2f\xf4\x01\xf7\xa8\x23\x70\xda\x4c\xf2\x40\x1d\xc1\x53\x0d\x3e\x65\xa2\x45\xd0\x1b\x68\x16\xce\x06\xfc\x0f\xda\x5d\x07\x8e\x82\xe3\xc0\x51\x62\x7e\xa0\x05\xb5\x70\xd4\xeb\x83\x96\xba\x41\x33\x7c\xdc\x9b\x6e\xf6\xc2\x29\x9c\xbb\x98\x67\xe0\x43\xbf\xc1\xa9\x36\x93\x1e\x3a\x23\xbd\x43\xde\xda\x0a\x5f\x30\x97\xb6\x22\xee\xb4\xc4\x85\xce\x81\x03\xe0\x8f\x09\x5c\xec\x02\xe7\x60\xef\xcf\xbd\x30\xbb\x98\xff\x26\x97\x3a\xb8\x5c\xde\x03\xf2\x30\xbb\x2e\x9c\xef\x5e\xff\x53\xe1\x2a\xf6\x27\x46\x78\x02\x8d\xf2\x3a\x52\x08\xaf\xe0\x13\xb5\xc5\xb9\x85\x3e\x02\x03\x38\x82\x5a\x22\xb6\xe7\x6c\x2f\xfd\xc4\x99\x86\xf3\x06\x39\x69\xd4\xc1\x88\x3f\xff\x9b\xc8\x79\x87\x33\x18\x7a\x88\x3a\xf8\x5e\x39\x89\xeb\xfb\x5a\x0a\x36\x7f\x2e\x26\x72\xa1\x1f\xf0\x0d\xec\xd0\x1b\xd4\x05\x1c\xc3\x5e\x73\xd3\x5f\xf4\xb7\x97\x35\xe8\x2d\x34\x07\x35\x4c\x5a\xe1\x64\x17\x6c\xc1\x71\xcc\x67\xd9\x09\x86\x2a\x70\xad\x08\x79\x23\x0e\x6a\xd1\x86\xb3\x01\xe7\x15\xe6\x07\xff\xcf\x31\xcf\xb9\xd4\x01\xfc\x6d\x6f\xef\x00\x95\xf4\xd2\xcf\x5f\x2d\x3c\x06\x67\xa0\xbd\xd0\x37\xf4\x53\x87\xd8\xe0\x08\xde\xaf\x1e\xbf\x9b\xe1\x82\xee\x82\x97\x7d\x38\x8f\xca\x30\xf7\xb2\x6f\x7d\xfb\x02\x7d\xf9\xcd\x30\x7c\x29\xfd\xde\x17\xe8\xed\x7b\xea\xd1\x17\x6c\xb4\x5a\x3d\x7b\xd3\xfc\x6f\x00\x00\x00\xff\xff\x4f\x77\x70\x92\x00\x10\x00\x00")

func templatesTemplatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplatesGo,
		"templates/templates.go",
	)
}

func templatesTemplatesGo() (*asset, error) {
	bytes, err := templatesTemplatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/templates.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1605716082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/plugins/readme/README.md": templatesPluginsReadmeReadmeMd,
	"templates/templates.go":             templatesTemplatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"plugins": &bintree{nil, map[string]*bintree{
			"readme": &bintree{nil, map[string]*bintree{
				"README.md": &bintree{templatesPluginsReadmeReadmeMd, map[string]*bintree{}},
			}},
		}},
		"templates.go": &bintree{templatesTemplatesGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
